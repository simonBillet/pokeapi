[{"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/index.js":"1","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/App.js":"2","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/serviceWorker.js":"3","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/app/store.js":"4","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/Accueil.js":"5","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonRandom.js":"6","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/api/client.js":"7","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokeListe.js":"8","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/pokemonsSlice.js":"9","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/detailPokemon.js":"10","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/DetailPokemon.js":"11","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonCard.js":"12","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/Spinner.js":"13","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonType.js":"14","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonCardType.js":"15","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/Favoris.js":"16","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonCardFavoris.js":"17"},{"size":644,"mtime":1611605379304,"results":"18","hashOfConfig":"19"},{"size":1488,"mtime":1614101376414,"results":"20","hashOfConfig":"19"},{"size":5141,"mtime":1611605379305,"results":"21","hashOfConfig":"19"},{"size":211,"mtime":1612428614796,"results":"22","hashOfConfig":"19"},{"size":221,"mtime":1613990043389,"results":"23","hashOfConfig":"19"},{"size":3128,"mtime":1613990043401,"results":"24","hashOfConfig":"19"},{"size":1071,"mtime":1611607612873,"results":"25","hashOfConfig":"19"},{"size":2320,"mtime":1614029318715,"results":"26","hashOfConfig":"19"},{"size":4222,"mtime":1614250541878,"results":"27","hashOfConfig":"19"},{"size":239,"mtime":1612550409770,"results":"28","hashOfConfig":"29"},{"size":3626,"mtime":1614201061052,"results":"30","hashOfConfig":"19"},{"size":1399,"mtime":1614179100828,"results":"31","hashOfConfig":"19"},{"size":231,"mtime":1613918062210,"results":"32","hashOfConfig":"19"},{"size":2573,"mtime":1614029318725,"results":"33","hashOfConfig":"19"},{"size":1425,"mtime":1614179100819,"results":"34","hashOfConfig":"19"},{"size":671,"mtime":1614180164262,"results":"35","hashOfConfig":"19"},{"size":1065,"mtime":1614179749196,"results":"36","hashOfConfig":"19"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"16u74tk",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"t6ny0i",{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"39"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"39"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"39"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"39"},"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/index.js",[],["79","80"],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/App.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/serviceWorker.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/app/store.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/Accueil.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonRandom.js",["81","82"],"import React, {useEffect} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {requetePokemonId, selectDetailPokemonAleatoire, selectorStatusPokemonAleatoire} from \"./pokemonsSlice\";\nimport { useSelector } from \"react-redux\";\nimport {Spinner} from \"./Spinner\";\n\nexport const PokemonRandom = () => {\n    // Informa sur le pokémon\n    const pokemon = useSelector(selectDetailPokemonAleatoire)\n\n    // Status du pokémon\n    const state = useSelector(selectorStatusPokemonAleatoire)\n    // dispatch\n    const dispatch = useDispatch()\n\n    // Fonction permettant de générer un nombre aléatoire\n    function getRandomArbitrary(min, max) {\n        return Math.random() * (max - min) + min;\n    }\n\n    // Limitation à 898 nombres car c'est le nombre de pokémon dans l'api\n    const index = Math.round(getRandomArbitrary(1, 898))\n\n    // Méthode appelé au lancement du fichier\n    // Permet de retourner un pokémon aléatoire si aucun pokémon n'a été retourné\n    useEffect(() => {\n        if (state === 'rien'){\n            dispatch(requetePokemonId(index))\n        }\n    })\n\n    // Permet d'avoir les informations détaillé du pokémon\n    const affichageDetailPokemon = (\n        <div className={\"card-pokemon-random\"}>\n            <div className={\"col-sm-4\"}>\n                <img className={\"card-pokemon-random-image\"} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + pokemon.id + \".png\"}/>\n                <h2 className={\"card-pokemon-random-nom\"}>{pokemon.name}</h2>\n            </div>\n            <div className={\"col-sm-8\"}>\n                <p className={\"card-pokemon-random-sous-titres\"}> Statistiques :</p>\n                <div className={\"card-pokemon-random-div\"}>\n                    {pokemon.length !== 0\n                        ?pokemon.stats.map(stat => (\n                            <p className={\"card-pokemon-random-texte-2\"}><strong>{ stat.stat.name }</strong> : { stat.base_stat }</p>\n                        ))\n                        :''\n                    }\n                </div>\n                <p className={\"card-pokemon-random-sous-titres\"}> Autres :</p>\n                <div className={\"card-pokemon-random-div\"}>\n                    <p className={\"card-pokemon-random-texte\"}><strong>hauteur</strong> : {pokemon.height}</p>\n                    <p className={\"card-pokemon-random-texte\"}><strong>poids</strong> : {pokemon.weight}</p>\n                </div>\n                <p className={\"card-pokemon-random-sous-titres\"}> Type(s) :</p>\n                <div className={\"card-pokemon-random-div\"}>\n                    {pokemon.length !== 0\n                        ?pokemon.types.map(type => (\n                            <img className={\"card-pokemon-random-image-type\"} src={window.location.origin + '/types/' + type.type.name + '.png'}/>\n                        ))\n                        :''\n                    }\n                </div>\n            </div>\n        </div>\n    )\n\n    return(\n        <div>\n            {state !== 'rien'\n                ? affichageDetailPokemon\n                : <Spinner/>\n            }\n        </div>\n    );\n}\n","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/api/client.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokeListe.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/pokemonsSlice.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/detailPokemon.js",[],["83","84"],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/DetailPokemon.js",["85","86","87"],"import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    ajouterPokemonMesFavoris,\n    selectDetailPokemonCible,\n    selectListeMesFavoris,\n    selectorStatusPokemonCible, supprimerPokemonMesFavoris\n} from \"./pokemonsSlice\";\n\nexport const DetailPokemon = () => {\n    // Variable contenant les informations sur le pokémon qui a été sélectionné\n    const pokemon = useSelector(selectDetailPokemonCible)\n\n    const listPokemon = useSelector(selectListeMesFavoris)\n\n    // dispatch\n    const dispatch = useDispatch()\n\n    // statut de la requête\n    const state = useSelector(selectorStatusPokemonCible)\n\n    // On vérifie si le pokémon sélectionné est déjà un favoris\n    // Si oui, on affiche un bouton pour l'enlever des favoris\n    // Si non, on affiche un bouton pour l'ajouter aux favoris\n    const verifFavoris = () => {\n        let estFavoris = false\n        listPokemon.map(poke => {\n            if (poke.name === pokemon.name){\n                estFavoris = true\n            }\n        })\n\n        if (estFavoris){\n            return (<button className={\"card-detail-bouton-supprimer-favoris\"} onClick={supprimerPokemonFavoris}>Supprimer de mes favoris</button>)\n        } else {\n            return (<button className={\"card-detail-bouton-ajouter-favoris\"} onClick={ajouterPokemonFavoris}>Ajouter à mes favoris</button>)\n        }\n    }\n\n    // Permet d'ajouter le pokémon à la liste des pokémons favoris de l'utilisateur\n    const ajouterPokemonFavoris = () => {\n        dispatch(ajouterPokemonMesFavoris(pokemon))\n    }\n\n    // Permet de supprimer le pokémon de la liste des pokémons favoris\n    const supprimerPokemonFavoris = () => {\n        dispatch(supprimerPokemonMesFavoris(pokemon))\n    }\n\n    // Permet d'avoir les informations détaillé du pokémon\n    const affichageDetailPokemon = (\n        <div className={\"card-detail-pokemon\"}>\n            <img className={\"card-detail-pokemon-image\"} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + pokemon.id + \".png\"}/>\n            <h2 className={\"card-detail-pokemon-nom\"}>{pokemon.name}</h2>\n            {verifFavoris()}\n            <p className={\"card-detail-pokemon-sous-titres\"}> Type(s) :</p>\n            <div className={\"card-detail-pokemon-div\"}>\n                {pokemon.length !== 0\n                    ?pokemon.types.map(type => (\n                        <img className={\"card-detail-pokemon-image-type\"} src={window.location.origin + '/types/' + type.type.name + '.png'}/>\n                    ))\n                    :''\n                }\n            </div>\n            <p className={\"card-detail-pokemon-sous-titres\"}> Statistiques :</p>\n            <div className={\"card-detail-pokemon-div\"}>\n                {pokemon.length !== 0\n                    ?pokemon.stats.map(stat => (\n                        <p className={\"card-detail-pokemon-texte\"}><strong>{ stat.stat.name }</strong> : { stat.base_stat }</p>\n                    ))\n                    :''\n                }\n            </div>\n            <p className={\"card-detail-pokemon-sous-titres\"}> Autres :</p>\n            <div className={\"card-detail-pokemon-div\"}>\n                <p className={\"card-detail-pokemon-texte\"}><strong>hauteur</strong> : {pokemon.height}</p>\n                <p className={\"card-detail-pokemon-texte\"}><strong>poids</strong> : {pokemon.weight}</p>\n            </div>\n        </div>\n    )\n\n    return(\n        <div>\n            {state !== 'rien'\n                ? affichageDetailPokemon\n                : <p>Aucun pokémon sélectionné</p>\n            }\n        </div>\n    );\n}\n","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonCard.js",["88","89"],"import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ajoutPokemonMesFavoris, requeteDetailPokemon, selectPokemonsListe} from \"./pokemonsSlice\";\n\n\nexport const PokemonCard = () => {\n    // Récupération des pokémons\n    const pokemons = useSelector(selectPokemonsListe)\n\n    // dispatch\n    const dispatch = useDispatch()\n\n    // Permet d'aller chercher les données du pokémon qui viens d'être ciblé par l'utilisateur\n    const pokemonCible = (name) => {\n        dispatch(requeteDetailPokemon(name))\n    }\n\n    // Récupération de l'id du pokémon grâce à l'url du pokémon qui le contient\n    // cet id sera utilisé dans un autre url pour récupérer l'image\n    const image = (urlImage) => {\n        let image = urlImage.split('/')\n        let resultatImage = image[6]\n        return resultatImage\n    };\n\n    // Affichage des pokémons qui sont contenu dans la liste\n    const pokemonCard = pokemons.results.map(pokemon => (\n        <div className={\"card-pokemon-liste\"}>\n            <img onClick={() => pokemonCible(pokemon.name)} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + image(pokemon.url) + \".png\"}/>\n            <button key={pokemon.name} onClick={() => pokemonCible(pokemon.name)} className={\"bouton-pokemon-liste\"}>{pokemon.name}</button>\n        </div>\n    ))\n\n    return (\n        pokemonCard\n    )\n}\n","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/Spinner.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonType.js",["90","91"],"import React, {useEffect} from \"react\";\nimport {DetailPokemon} from \"./DetailPokemon\";\nimport types from \"../../types.json\";\nimport {Spinner} from \"./Spinner\";\nimport {PokemonCardType} from \"./PokemonCardType\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    requetePokemonType,\n    selectorStatusListeType,\n    selectPokemonListeType,\n} from \"./pokemonsSlice\";\n\nexport const PokemonType = () => {\n    // Récupération de la liste des pokémons\n    const pokemons = useSelector(selectPokemonListeType)\n\n    // dispatch\n    const dispatch = useDispatch()\n    // statut de la requête\n    const status = useSelector(selectorStatusListeType)\n\n    // Permet de retourner une liste de pokémons si aucune liste n'a été retourné\n    useEffect( () => {\n        if (status === 'rien'){\n            dispatch(requetePokemonType(1))\n        }\n    })\n\n    // Permet de changer le type des pokémons que l'on souhaite voir\n    const changertype = (id) => {\n        dispatch(requetePokemonType(id))\n    }\n\n    // Permet de retourne l'images des types des pokémons\n    // Si c'est le type sélectionné par l'utilsiateur alors il prendra une classe avec de l'opacity\n    const imageDesTypes = (type) => {\n        if(pokemons.name === type.name){\n            return(<img onClick={() => changertype(type.id)} className={\"liste-type-pokemon-image opacity\"} src={window.location.origin + '/types/' + type.name + '.png'}/>)\n        } else {\n            return(<img onClick={() => changertype(type.id)} className={\"liste-type-pokemon-image\"} src={window.location.origin + '/types/' + type.name + '.png'}/>)\n        }\n    }\n\n    return(\n        <div className=\"App container-fluid\">\n            <h1>Pokémon par type</h1>\n            <h2>Les différents types :</h2>\n            <div className={\"liste-type-pokemon\"}>\n                {types.map(type => (\n                    imageDesTypes(type)\n                ))\n                }\n            </div>\n\n            <div className={\"row\"}>\n                <div className={\"col-sm-8\"}>\n                    <h2>Liste selon le type sélectionné :</h2>\n                    {pokemons.length !== 0\n                        ?\n                        <div className={\"liste-pokemon\"}>\n                            {status === 'succès' ?<PokemonCardType/> :<Spinner/>}\n                        </div>\n                        :<div></div>\n                    }\n                </div>\n\n                <div className={\"col-sm-4\"}>\n                    <DetailPokemon />\n                </div>\n            </div>\n        </div>\n    );\n}\n","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonCardType.js",["92"],"import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {requeteDetailPokemon, selectPokemonListeType} from \"./pokemonsSlice\";\n\n\nexport const PokemonCardType = () => {\n    // Récupération des pokémons\n    const pokemons = useSelector(selectPokemonListeType)\n\n    // dispatch\n    const dispatch = useDispatch()\n\n    // Permet d'aller chercher les données du pokémon qui viens d'être ciblé par l'utilisateur\n    const pokemonCible = (name) => {\n        dispatch(requeteDetailPokemon(name))\n    }\n\n    // Récupération de l'id du pokémon grâce à l'url du pokémon qui le contient\n    // Cet id sera utilisé dans un autre url pour récupérer l'image\n    const image = (urlImage) => {\n        let image = urlImage.split('/')\n        let resultatImage = image[6]\n        return resultatImage\n    };\n\n    // Affichage des pokémons qui sont contenu dans la liste\n    const pokemonCard = pokemons.pokemon.map(pokemon => (\n        <div className={\"card-pokemon-liste\"}>\n            <img onClick={() => pokemonCible(pokemon.pokemon.name)} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + image(pokemon.pokemon.url) + \".png\"}/>\n            <button key={pokemon.pokemon.name} onClick={() => pokemonCible(pokemon.pokemon.name)} className={\"bouton-pokemon-liste\"}>{pokemon.pokemon.name}</button>\n        </div>\n    ))\n\n    return (\n        pokemonCard\n    )\n}\n","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/Favoris.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonCardFavoris.js",["93"],"import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {requeteDetailPokemon, selectListeMesFavoris} from \"./pokemonsSlice\";\n\n\nexport const PokemonCardFavoris = () => {\n    // Récupération des pokémons\n    const pokemons = useSelector(selectListeMesFavoris)\n\n    // dispatch\n    const dispatch = useDispatch()\n\n    // Permet d'aller chercher les données du pokémon qui viens d'être ciblé par l'utilisateur\n    const pokemonCible = (name) => {\n        dispatch(requeteDetailPokemon(name))\n    }\n\n    // Affichage des pokémons qui sont contenu dans la liste\n    const pokemonCard = pokemons.map(pokemon => (\n        <div className={\"card-pokemon-liste\"}>\n            <img onClick={() => pokemonCible(pokemon.name)} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + pokemon.id + \".png\"}/>\n            <button key={pokemon.name} onClick={() => pokemonCible(pokemon.name)} className={\"bouton-pokemon-liste\"}>{pokemon.name}</button>\n        </div>\n    ))\n\n    return (\n        pokemonCard\n    )\n}\n",{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":36,"column":17,"nodeType":"100","endLine":36,"endColumn":167},{"ruleId":"98","severity":1,"message":"99","line":58,"column":29,"nodeType":"100","endLine":58,"endColumn":147},{"ruleId":"94","replacedBy":"101"},{"ruleId":"96","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":27,"column":30,"nodeType":"105","messageId":"106","endLine":27,"endColumn":32},{"ruleId":"98","severity":1,"message":"99","line":53,"column":13,"nodeType":"100","endLine":53,"endColumn":163},{"ruleId":"98","severity":1,"message":"99","line":60,"column":25,"nodeType":"100","endLine":60,"endColumn":143},{"ruleId":"107","severity":1,"message":"108","line":3,"column":9,"nodeType":"109","messageId":"110","endLine":3,"endColumn":31},{"ruleId":"98","severity":1,"message":"99","line":29,"column":13,"nodeType":"100","endLine":29,"endColumn":174},{"ruleId":"98","severity":1,"message":"99","line":38,"column":20,"nodeType":"100","endLine":38,"endColumn":172},{"ruleId":"98","severity":1,"message":"99","line":40,"column":20,"nodeType":"100","endLine":40,"endColumn":164},{"ruleId":"98","severity":1,"message":"99","line":29,"column":13,"nodeType":"100","endLine":29,"endColumn":190},{"ruleId":"98","severity":1,"message":"99","line":21,"column":13,"nodeType":"100","endLine":21,"endColumn":166},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["111"],["112"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'ajoutPokemonMesFavoris' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]