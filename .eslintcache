[{"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/index.js":"1","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/App.js":"2","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/serviceWorker.js":"3","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/app/store.js":"4","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/Accueil.js":"5","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonRandom.js":"6","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/api/client.js":"7","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokeListe.js":"8","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/pokemonsSlice.js":"9","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/detailPokemon.js":"10","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/DetailPokemon.js":"11","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonCard.js":"12","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/Spinner.js":"13","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonType.js":"14","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonCardType.js":"15","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/Favoris.js":"16","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonCardFavoris.js":"17"},{"size":644,"mtime":1611605379304,"results":"18","hashOfConfig":"19"},{"size":1486,"mtime":1614800334279,"results":"20","hashOfConfig":"19"},{"size":5141,"mtime":1611605379305,"results":"21","hashOfConfig":"19"},{"size":211,"mtime":1612428614796,"results":"22","hashOfConfig":"19"},{"size":221,"mtime":1613990043389,"results":"23","hashOfConfig":"19"},{"size":4512,"mtime":1614441431881,"results":"24","hashOfConfig":"19"},{"size":1071,"mtime":1611607612873,"results":"25","hashOfConfig":"19"},{"size":2335,"mtime":1614425113247,"results":"26","hashOfConfig":"19"},{"size":4213,"mtime":1614800334280,"results":"27","hashOfConfig":"19"},{"size":239,"mtime":1612550409770,"results":"28","hashOfConfig":"19"},{"size":3708,"mtime":1614443657754,"results":"29","hashOfConfig":"19"},{"size":1391,"mtime":1614263632993,"results":"30","hashOfConfig":"19"},{"size":231,"mtime":1613918062210,"results":"31","hashOfConfig":"19"},{"size":2614,"mtime":1614426796960,"results":"32","hashOfConfig":"19"},{"size":1441,"mtime":1614263039066,"results":"33","hashOfConfig":"19"},{"size":692,"mtime":1614427433650,"results":"34","hashOfConfig":"19"},{"size":1081,"mtime":1614353731599,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"t6ny0i",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/index.js",[],["77","78"],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/App.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/serviceWorker.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/app/store.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/Accueil.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonRandom.js",["79","80"],"import React, {useEffect} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {\n    ajouterPokemonMesFavoris,\n    requetePokemonId,\n    selectDetailPokemonAleatoire, selectListeMesFavoris,\n    selectorStatusPokemonAleatoire, supprimerPokemonMesFavoris\n} from \"./pokemonsSlice\";\nimport { useSelector } from \"react-redux\";\nimport {Spinner} from \"./Spinner\";\n\nexport const PokemonRandom = () => {\n    // Informa sur le pokémon\n    const pokemon = useSelector(selectDetailPokemonAleatoire)\n\n    const listPokemon = useSelector(selectListeMesFavoris)\n\n    // Status du pokémon\n    const state = useSelector(selectorStatusPokemonAleatoire)\n    // dispatch\n    const dispatch = useDispatch()\n\n    // Fonction permettant de générer un nombre aléatoire\n    function getRandomArbitrary(min, max) {\n        return Math.random() * (max - min) + min;\n    }\n\n    // Limitation à 898 nombres car c'est le nombre de pokémon dans l'api\n    const index = Math.round(getRandomArbitrary(1, 898))\n\n    // Méthode appelé au lancement du fichier\n    // Permet de retourner un pokémon aléatoire si aucun pokémon n'a été retourné\n    useEffect(() => {\n        if (state === 'rien'){\n            dispatch(requetePokemonId(index))\n        }\n    })\n\n    // On vérifie si le pokémon sélectionné est déjà un favoris\n    // Si oui, on affiche un bouton pour l'enlever des favoris\n    // Si non, on affiche un bouton pour l'ajouter aux favoris\n    const verifFavoris = () => {\n        let estFavoris = false\n\n        listPokemon.forEach(poke => {\n            if (poke.id === pokemon.id){\n                estFavoris = true\n            }\n        })\n\n        if (estFavoris){\n            return (<button className={\"card-detail-bouton-supprimer-favoris\"} onClick={supprimerPokemonFavoris} role={\"Supprimer-favoris\"}>Supprimer de mes favoris</button>)\n        } else {\n            return (<button className={\"card-detail-bouton-ajouter-favoris\"} onClick={ajouterPokemonFavoris} role={\"Ajouter-favoris\"}>Ajouter à mes favoris</button>)\n        }\n    }\n\n    // Permet d'ajouter le pokémon à la liste des pokémons favoris de l'utilisateur\n    const ajouterPokemonFavoris = () => {\n        dispatch(ajouterPokemonMesFavoris(pokemon))\n    }\n\n    // Permet de supprimer le pokémon de la liste des pokémons favoris\n    const supprimerPokemonFavoris = () => {\n        dispatch(supprimerPokemonMesFavoris(pokemon))\n    }\n\n    // Permet d'avoir les informations détaillé du pokémon\n    const affichageDetailPokemon = (\n        <div className={\"card-pokemon-random\"}>\n            <div className={\"col-sm-4\"}>\n                <img className={\"card-pokemon-random-image\"} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + pokemon.id + \".png\"} alt={\"pokemon\"}/>\n                <h2 className={\"card-pokemon-random-nom\"}>{pokemon.name}</h2>\n                {verifFavoris()}\n            </div>\n            <div className={\"col-sm-8\"}>\n                <p className={\"card-pokemon-random-sous-titres\"}> Statistiques :</p>\n                <div className={\"card-pokemon-random-div\"}>\n                    {pokemon.length !== 0\n                        ?pokemon.stats.map(stat => (\n                            <p className={\"card-pokemon-random-texte-2\"}><strong>{ stat.stat.name }</strong> : { stat.base_stat }</p>\n                        ))\n                        :''\n                    }\n                </div>\n                <p className={\"card-pokemon-random-sous-titres\"}> Autres :</p>\n                <div className={\"card-pokemon-random-div\"}>\n                    <p className={\"card-pokemon-random-texte\"}><strong>hauteur</strong> : {pokemon.height}</p>\n                    <p className={\"card-pokemon-random-texte\"}><strong>poids</strong> : {pokemon.weight}</p>\n                </div>\n                <p className={\"card-pokemon-random-sous-titres\"}> Type(s) :</p>\n                <div className={\"card-pokemon-random-div\"}>\n                    {pokemon.length !== 0\n                        ?pokemon.types.map(type => (\n                            <img className={\"card-pokemon-random-image-type\"} src={window.location.origin + '/types/' + type.type.name + '.png'} alt={\"type\"}/>\n                        ))\n                        :''\n                    }\n                </div>\n            </div>\n        </div>\n    )\n\n    return(\n        <div>\n            {state !== 'rien'\n                ? affichageDetailPokemon\n                : <Spinner/>\n            }\n        </div>\n    );\n}\n","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/api/client.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokeListe.js",["81"],"import {useDispatch, useSelector} from \"react-redux\";\nimport {useEffect} from \"react\";\nimport {DetailPokemon} from \"./DetailPokemon\";\nimport {PokemonCard} from \"./PokemonCard\";\nimport {Spinner} from \"./Spinner\";\nimport {\n    requeteIndex,\n    selectorStatus,\n    selectPokemonsListe,\n} from \"./pokemonsSlice\";\n\nexport const PokeListe = () => {\n    // Récupération des pokémons\n    const pokemons = useSelector(selectPokemonsListe)\n\n    // Numéro de la page, ne fonctionne pas vraiment\n    let numeroPage = 1\n\n    // dispatch\n    const dispatch = useDispatch()\n    // statut de la requête\n    const status = useSelector(selectorStatus)\n\n    // Permet de retourner une liste de pokémons si aucune liste n'a été retourné\n    useEffect( () => {\n        if (status === 'inactif'){\n            dispatch(requeteIndex('https://pokeapi.co/api/v2/pokemon?offset=0&limit=20'))\n        }\n    })\n\n    // Permet de passer à la liste de pokémon suivante à celle d'afficher actuellement\n    const pageSuivante = () => {\n        dispatch(requeteIndex(pokemons.next))\n\n    }\n\n    // Permet de passer à la liste de pokémon précédente à celle d'afficher actuellement\n    const pagePrecedente = () => {\n        dispatch(requeteIndex(pokemons.previous))\n    }\n\n    return(\n        <div className=\"App container-fluid\">\n            <h1>Poké liste</h1>\n            <h2>Liste des pokémons :</h2>\n            <div className={\"row\"}>\n                <div className={\"col-sm-8\"}>\n                    <div className={\"bouton-nav-liste-pokemon\"}>\n                        <button onClick={pagePrecedente} className={\"bouton-changer-page\"}>Précédent</button>\n                        <p className={\"numero-page\"}>{numeroPage}</p>\n                        <button onClick={pageSuivante} className={\"bouton-changer-page\"}>Suivant</button>\n                    </div>\n                    {pokemons.length !== 0\n                        ?\n                        <div className={\"liste-pokemon\"} role={\"liste\"}>\n                            {status === 'succès' ?<PokemonCard/> :<Spinner/>}\n                        </div>\n                        :<div></div>\n                    }\n                </div>\n                <div className={\"col-sm-4\"}>\n                    <DetailPokemon />\n                </div>\n            </div>\n        </div>\n    );\n}\n\n","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/pokemonsSlice.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/detailPokemon.js",[],["82","83"],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/DetailPokemon.js",["84","85"],"import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    ajouterPokemonMesFavoris,\n    selectDetailPokemonCible,\n    selectListeMesFavoris,\n    selectorStatusPokemonCible, supprimerPokemonMesFavoris\n} from \"./pokemonsSlice\";\n\nexport const DetailPokemon = () => {\n    // Variable contenant les informations sur le pokémon qui a été sélectionné\n    const pokemon = useSelector(selectDetailPokemonCible)\n\n    const listPokemon = useSelector(selectListeMesFavoris)\n\n    // dispatch\n    const dispatch = useDispatch()\n\n    // statut de la requête\n    const state = useSelector(selectorStatusPokemonCible)\n\n    // On vérifie si le pokémon sélectionné est déjà un favoris\n    // Si oui, on affiche un bouton pour l'enlever des favoris\n    // Si non, on affiche un bouton pour l'ajouter aux favoris\n    const verifFavoris = () => {\n        let estFavoris = false\n\n        listPokemon.forEach(poke => {\n            if (poke.id === pokemon.id){\n                estFavoris = true\n            }\n        })\n\n        if (estFavoris){\n            return (<button className={\"card-detail-bouton-supprimer-favoris\"} onClick={supprimerPokemonFavoris} role={\"Supprimer-favoris\"}>Supprimer de mes favoris</button>)\n        } else {\n            return (<button className={\"card-detail-bouton-ajouter-favoris\"} onClick={ajouterPokemonFavoris} role={\"Ajouter-favoris\"}>Ajouter à mes favoris</button>)\n        }\n    }\n\n    // Permet d'ajouter le pokémon à la liste des pokémons favoris de l'utilisateur\n    const ajouterPokemonFavoris = () => {\n        dispatch(ajouterPokemonMesFavoris(pokemon))\n    }\n\n    // Permet de supprimer le pokémon de la liste des pokémons favoris\n    const supprimerPokemonFavoris = () => {\n        dispatch(supprimerPokemonMesFavoris(pokemon))\n    }\n\n    // Permet d'avoir les informations détaillé du pokémon\n    const affichageDetailPokemon = (\n        <div className={\"card-detail-pokemon\"}>\n            <img className={\"card-detail-pokemon-image\"} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + pokemon.id + \".png\"} alt={\"pokemon\"}/>\n            <h2 className={\"card-detail-pokemon-nom\"}>{pokemon.name}</h2>\n            {verifFavoris()}\n            <p className={\"card-detail-pokemon-sous-titres\"}> Type(s) :</p>\n            <div className={\"card-detail-pokemon-div\"}>\n                {pokemon.length !== 0\n                    ?pokemon.types.map(type => (\n                        <img className={\"card-detail-pokemon-image-type\"} src={window.location.origin + '/types/' + type.type.name + '.png'} alt={\"type\"}/>\n                    ))\n                    :''\n                }\n            </div>\n            <p className={\"card-detail-pokemon-sous-titres\"}> Statistiques :</p>\n            <div className={\"card-detail-pokemon-div\"}>\n                {pokemon.length !== 0\n                    ?pokemon.stats.map(stat => (\n                        <p className={\"card-detail-pokemon-texte\"}><strong>{ stat.stat.name }</strong> : { stat.base_stat }</p>\n                    ))\n                    :''\n                }\n            </div>\n            <p className={\"card-detail-pokemon-sous-titres\"}> Autres :</p>\n            <div className={\"card-detail-pokemon-div\"}>\n                <p className={\"card-detail-pokemon-texte\"}><strong>hauteur</strong> : {pokemon.height}</p>\n                <p className={\"card-detail-pokemon-texte\"}><strong>poids</strong> : {pokemon.weight}</p>\n            </div>\n        </div>\n    )\n\n    return(\n        <div>\n            {state !== 'rien'\n                ? affichageDetailPokemon\n                : <p>Aucun pokémon sélectionné</p>\n            }\n        </div>\n    );\n}\n","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonCard.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/Spinner.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonType.js",["86"],"import React, {useEffect} from \"react\";\nimport {DetailPokemon} from \"./DetailPokemon\";\nimport types from \"../../types.json\";\nimport {Spinner} from \"./Spinner\";\nimport {PokemonCardType} from \"./PokemonCardType\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    requetePokemonType,\n    selectorStatusListeType,\n    selectPokemonListeType,\n} from \"./pokemonsSlice\";\n\nexport const PokemonType = () => {\n    // Récupération de la liste des pokémons\n    const pokemons = useSelector(selectPokemonListeType)\n\n    // dispatch\n    const dispatch = useDispatch()\n    // statut de la requête\n    const status = useSelector(selectorStatusListeType)\n\n    // Permet de retourner une liste de pokémons si aucune liste n'a été retourné\n    useEffect( () => {\n        if (status === 'rien'){\n            dispatch(requetePokemonType(1))\n        }\n    })\n\n    // Permet de changer le type des pokémons que l'on souhaite voir\n    const changertype = (id) => {\n        dispatch(requetePokemonType(id))\n    }\n\n    // Permet de retourne l'images des types des pokémons\n    // Si c'est le type sélectionné par l'utilsiateur alors il prendra une classe avec de l'opacity\n    const imageDesTypes = (type) => {\n        if(pokemons.name === type.name){\n            return(<img onClick={() => changertype(type.id)} className={\"liste-type-pokemon-image opacity\"} src={window.location.origin + '/types/' + type.name + '.png'} alt={\"type\"}/>)\n        } else {\n            return(<img onClick={() => changertype(type.id)} className={\"liste-type-pokemon-image\"} src={window.location.origin + '/types/' + type.name + '.png'} alt={\"type\"}/>)\n        }\n    }\n\n    return(\n        <div className=\"App container-fluid\">\n            <h1>Pokémon par type</h1>\n            <h2>Les différents types :</h2>\n            <div className={\"liste-type-pokemon\"}>\n                {types.map(type => (\n                    imageDesTypes(type)\n                ))\n                }\n            </div>\n\n            <div className={\"row\"}>\n                <div className={\"col-sm-8\"}>\n                    <h2>Liste selon le type sélectionné :</h2>\n                    {pokemons.length !== 0\n                        ?\n                        <div className={\"liste-pokemon\"} role={\"liste\"}>\n                            {status === 'succès' ?<PokemonCardType/> :<Spinner/>}\n                        </div>\n                        :<div></div>\n                    }\n                </div>\n\n                <div className={\"col-sm-4\"}>\n                    <DetailPokemon />\n                </div>\n            </div>\n        </div>\n    );\n}\n","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonCardType.js",[],"/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/Favoris.js",["87"],"import React from \"react\";\nimport {PokemonCardFavoris} from \"./PokemonCardFavoris\";\nimport {DetailPokemon} from \"./DetailPokemon\";\n\nexport const Favoris = () => {\n    return(\n        <div className=\"App container-fluid\">\n            <h1>Mes favoris</h1>\n            <h2>Liste de mes favoris :</h2>\n            <div className={\"row\"}>\n                <div className={\"col-sm-8\"}>\n                    <div className={\"liste-pokemon\"} role={\"liste\"}>\n                        <PokemonCardFavoris/>\n                    </div>\n                </div>\n                <div className={\"col-sm-4\"}>\n                    <DetailPokemon/>\n                </div>\n            </div>\n        </div>\n    );\n}\n","/Users/simonbillet/Documents/LicencePro/DWJSA/Poke-github/my-app/src/features/documents/PokemonCardFavoris.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":52,"column":114,"nodeType":"94","endLine":52,"endColumn":140},{"ruleId":"92","severity":1,"message":"93","line":54,"column":110,"nodeType":"94","endLine":54,"endColumn":134},{"ruleId":"92","severity":1,"message":"93","line":55,"column":58,"nodeType":"94","endLine":55,"endColumn":72},{"ruleId":"88","replacedBy":"95"},{"ruleId":"90","replacedBy":"96"},{"ruleId":"92","severity":1,"message":"93","line":35,"column":114,"nodeType":"94","endLine":35,"endColumn":140},{"ruleId":"92","severity":1,"message":"93","line":37,"column":110,"nodeType":"94","endLine":37,"endColumn":134},{"ruleId":"92","severity":1,"message":"93","line":60,"column":58,"nodeType":"94","endLine":60,"endColumn":72},{"ruleId":"92","severity":1,"message":"93","line":12,"column":54,"nodeType":"94","endLine":12,"endColumn":68},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute",["97"],["98"],"no-global-assign","no-unsafe-negation"]