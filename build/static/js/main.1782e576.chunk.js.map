{"version":3,"sources":["api/client.js","features/documents/pokemonsSlice.js","features/documents/Spinner.js","features/documents/PokemonRandom.js","features/documents/Accueil.js","features/documents/DetailPokemon.js","features/documents/PokemonCard.js","features/documents/PokeListe.js","features/documents/PokemonCardType.js","features/documents/PokemonType.js","features/documents/PokemonCardFavoris.js","features/documents/Favoris.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","requeteIndex","createAsyncThunk","query","reponse","requeteDetailPokemon","requete","requetePokemonId","requetePokemonType","pokemonSlice","createSlice","name","initialState","resultats","status","statusPokemonCible","detailPokemonCible","statusPokemonAleatoire","detailPokemonAleatoire","statusListeType","listePokemonType","listeMesFavoris","reducers","pokemonNumeroRequete","state","action","payload","pokemonDetailCible","pokemonDetailAleatoire","pokemonDetailType","ajouterPokemonMesFavoris","pokemon","push","supprimerPokemonMesFavoris","console","log","filter","item","id","extraReducers","pending","fulfilled","selectPokemonsListe","pokemons","selectorStatus","selectDetailPokemonCible","selectorStatusPokemonCible","selectDetailPokemonAleatoire","selectorStatusPokemonAleatoire","selectPokemonListeType","selectorStatusListeType","selectListeMesFavoris","actions","Spinner","className","role","PokemonRandom","useSelector","dispatch","useDispatch","min","max","index","Math","round","random","useEffect","affichageDetailPokemon","src","length","stats","map","stat","base_stat","height","weight","types","type","location","origin","Accueil","DetailPokemon","listPokemon","ajouterPokemonFavoris","supprimerPokemonFavoris","estFavoris","poke","onClick","verifFavoris","PokemonCard","pokemonCible","image","urlImage","split","results","url","PokeListe","previous","next","PokemonCardType","PokemonType","changertype","imageDesTypes","PokemonCardFavoris","Favoris","App","class","to","exact","path","configureStore","reducer","pokemonsReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1782e576.chunk.js","sourcesContent":["// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n    const headers = { 'Content-Type': 'application/json' }\n\n    const config = {\n        method: body ? 'POST' : 'GET',\n        ...customConfig,\n        headers: {\n            ...headers,\n            ...customConfig.headers,\n        },\n    }\n\n    if (body) {\n        config.body = JSON.stringify(body)\n    }\n\n    let data\n    try {\n        const response = await window.fetch(endpoint, config)\n        data = await response.json()\n        if (response.ok) {\n            return data\n        }\n        throw new Error(response.statusText)\n    } catch (err) {\n        return Promise.reject(err.message ? err.message : data)\n    }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n    return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n    return client(endpoint, { ...customConfig, body })\n}\n","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\nimport {client} from \"../../api/client\";\n\n// Etat par défaut du Slice\nexport const initialState = {\n    resultats: [],\n    status: 'inactif',\n    statusPokemonCible: 'rien',\n    detailPokemonCible: '',\n    statusPokemonAleatoire: 'rien',\n    detailPokemonAleatoire: '',\n    statusListeType: 'rien',\n    listePokemonType: [],\n    listeMesFavoris: []\n}\n\n\n// Recherche d'une liste de pokémon\nexport const requeteIndex = createAsyncThunk('pokemons/resultats',\n    async query => {\n        const reponse = await client.get(query)\n        return reponse\n    })\n\n// Recherche d'un pokémon par son nom\nexport const requeteDetailPokemon = createAsyncThunk('pokemons/detailPokemonCible',\n    async requete => {\n        const reponse = await client.get('https://pokeapi.co/api/v2/pokemon/' + requete)\n        return reponse\n    })\n\n// Recherche d'un pokémon par son id\nexport const requetePokemonId = createAsyncThunk('pokemons/detailPokemonAleatoire',\n    async requete => {\n        const reponse = await client.get('https://pokeapi.co/api/v2/pokemon/' + requete)\n        return reponse\n    })\n\n// recherche d'une liste de pokemon en fonction de leurs types\nexport const requetePokemonType = createAsyncThunk('pokemons/listePokemonType',\n    async requete => {\n        const reponse = await client.get('https://pokeapi.co/api/v2/type/' + requete);\n        return reponse\n    })\n\n\nconst pokemonSlice = createSlice({\n    name: 'pokemons',\n    initialState,\n    reducers: {\n        pokemonNumeroRequete(state, action){\n            state.status = action.payload.status\n        },\n        pokemonDetailCible(state, action){\n            state.statusPokemonCible = action.payload.statusPokemonCible\n        },\n        pokemonDetailAleatoire(state, action){\n            state.statusPokemonAleatoire = action.payload.statusPokemonAleatoire\n        },\n        pokemonDetailType(state, action){\n            state.statusListeType = action.payload.statusListeType\n        },\n        ajouterPokemonMesFavoris(state, pokemon){\n            state.listeMesFavoris.push(pokemon.payload)\n        },\n        supprimerPokemonMesFavoris(state, pokemon){\n            console.log(state.listeMesFavoris)\n            state.listeMesFavoris.filter(item => {\n                console.log('début')\n                console.log(item)\n                console.log(pokemon)\n                return item.id !== pokemon.payload.id\n            })\n        }\n    },\n    extraReducers: {\n        [requeteIndex.pending]: (state) => {\n            state.status = 'en cours'\n        },\n        [requeteIndex.fulfilled]: (state, action) => {\n            state.status = 'succès'\n            state.resultats = action.payload\n        },\n        [requeteDetailPokemon.fulfilled]: (state, action) => {\n            state.statusPokemonCible = 'succès'\n            state.detailPokemonCible = action.payload\n        },\n        [requetePokemonId.fulfilled]: (state, action) => {\n            state.statusPokemonAleatoire = 'succès'\n            state.detailPokemonAleatoire = action.payload\n        },\n        [requetePokemonType.fulfilled]: (state, action) => {\n            state.statusListeType = 'succès'\n            state.listePokemonType = action.payload\n        }\n    }\n})\n\nexport const selectPokemonsListe = state => state.pokemons.resultats\n\nexport const selectorStatus = state => state.pokemons.status\n\nexport const selectDetailPokemonCible = state => state.pokemons.detailPokemonCible\n\nexport const selectorStatusPokemonCible = state => state.pokemons.statusPokemonCible\n\nexport const selectDetailPokemonAleatoire = state => state.pokemons.detailPokemonAleatoire\n\nexport const selectorStatusPokemonAleatoire = state => state.pokemons.statusPokemonAleatoire\n\nexport const selectPokemonListeType = state => state.pokemons.listePokemonType\n\nexport const selectorStatusListeType = state => state.pokemons.statusListeType\n\nexport const selectListeMesFavoris = state => state.pokemons.listeMesFavoris\n\nexport const { pokemonNumeroRequete, pokemonDetailCible, pokemonDetailAleatoire, pokemonDetailType, ajouterPokemonMesFavoris, supprimerPokemonMesFavoris } = pokemonSlice.actions\n\nexport default pokemonSlice.reducer\n","import React from \"react\";\n\nexport const Spinner = () => {\n    // Retour du spinner\n    return (\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    )\n}\n","import React, {useEffect} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {requetePokemonId, selectDetailPokemonAleatoire, selectorStatusPokemonAleatoire} from \"./pokemonsSlice\";\nimport { useSelector } from \"react-redux\";\nimport {Spinner} from \"./Spinner\";\n\nexport const PokemonRandom = () => {\n    // Informa sur le pokémon\n    const pokemon = useSelector(selectDetailPokemonAleatoire)\n\n    // Status du pokémon\n    const state = useSelector(selectorStatusPokemonAleatoire)\n    // dispatch\n    const dispatch = useDispatch()\n\n    // Fonction permettant de générer un nombre aléatoire\n    function getRandomArbitrary(min, max) {\n        return Math.random() * (max - min) + min;\n    }\n\n    // Limitation à 898 nombres car c'est le nombre de pokémon dans l'api\n    const index = Math.round(getRandomArbitrary(1, 898))\n\n    // Méthode appelé au lancement du fichier\n    // Permet de retourner un pokémon aléatoire si aucun pokémon n'a été retourné\n    useEffect(() => {\n        if (state === 'rien'){\n            dispatch(requetePokemonId(index))\n        }\n    })\n\n    // Permet d'avoir les informations détaillé du pokémon\n    const affichageDetailPokemon = (\n        <div className={\"card-pokemon-random\"}>\n            <div className={\"col-sm-4\"}>\n                <img className={\"card-pokemon-random-image\"} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + pokemon.id + \".png\"}/>\n                <h2 className={\"card-pokemon-random-nom\"}>{pokemon.name}</h2>\n            </div>\n            <div className={\"col-sm-8\"}>\n                <p className={\"card-pokemon-random-sous-titres\"}> Statistiques :</p>\n                <div className={\"card-pokemon-random-div\"}>\n                    {pokemon.length !== 0\n                        ?pokemon.stats.map(stat => (\n                            <p className={\"card-pokemon-random-texte-2\"}><strong>{ stat.stat.name }</strong> : { stat.base_stat }</p>\n                        ))\n                        :''\n                    }\n                </div>\n                <p className={\"card-pokemon-random-sous-titres\"}> Autres :</p>\n                <div className={\"card-pokemon-random-div\"}>\n                    <p className={\"card-pokemon-random-texte\"}><strong>hauteur</strong> : {pokemon.height}</p>\n                    <p className={\"card-pokemon-random-texte\"}><strong>poids</strong> : {pokemon.weight}</p>\n                </div>\n                <p className={\"card-pokemon-random-sous-titres\"}> Type(s) :</p>\n                <div className={\"card-pokemon-random-div\"}>\n                    {pokemon.length !== 0\n                        ?pokemon.types.map(type => (\n                            <img className={\"card-pokemon-random-image-type\"} src={window.location.origin + '/types/' + type.type.name + '.png'}/>\n                        ))\n                        :''\n                    }\n                </div>\n            </div>\n        </div>\n    )\n\n    return(\n        <div>\n            {state !== 'rien'\n                ? affichageDetailPokemon\n                : <Spinner/>\n            }\n        </div>\n    );\n}\n","import {PokemonRandom} from \"./PokemonRandom\";\n\n\nexport const Accueil = () => {\n    return(\n        <div className=\"App container-fluid\">\n            <h1>Accueil</h1>\n            <PokemonRandom />\n        </div>\n    );\n}\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    ajouterPokemonMesFavoris,\n    selectDetailPokemonCible,\n    selectListeMesFavoris,\n    selectorStatusPokemonCible, supprimerPokemonMesFavoris\n} from \"./pokemonsSlice\";\n\nexport const DetailPokemon = () => {\n    // Variable contenant les informations sur le pokémon qui a été sélectionné\n    const pokemon = useSelector(selectDetailPokemonCible)\n\n    const listPokemon = useSelector(selectListeMesFavoris)\n\n    // dispatch\n    const dispatch = useDispatch()\n\n    // statut de la requête\n    const state = useSelector(selectorStatusPokemonCible)\n\n    // On vérifie si le pokémon sélectionné est déjà un favoris\n    // Si oui, on affiche un bouton pour l'enlever des favoris\n    // Si non, on affiche un bouton pour l'ajouter aux favoris\n    const verifFavoris = () => {\n        let estFavoris = false\n        listPokemon.map(poke => {\n            if (poke.name === pokemon.name){\n                estFavoris = true\n            }\n        })\n\n        if (estFavoris){\n            return (<button className={\"card-detail-bouton-supprimer-favoris\"} onClick={supprimerPokemonFavoris}>Supprimer de mes favoris</button>)\n        } else {\n            return (<button className={\"card-detail-bouton-ajouter-favoris\"} onClick={ajouterPokemonFavoris}>Ajouter à mes favoris</button>)\n        }\n    }\n\n    // Permet d'ajouter le pokémon à la liste des pokémons favoris de l'utilisateur\n    const ajouterPokemonFavoris = () => {\n        dispatch(ajouterPokemonMesFavoris(pokemon))\n    }\n\n    // Permet de supprimer le pokémon de la liste des pokémons favoris\n    const supprimerPokemonFavoris = () => {\n        dispatch(supprimerPokemonMesFavoris(pokemon))\n    }\n\n    // Permet d'avoir les informations détaillé du pokémon\n    const affichageDetailPokemon = (\n        <div className={\"card-detail-pokemon\"}>\n            <img className={\"card-detail-pokemon-image\"} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + pokemon.id + \".png\"}/>\n            <h2 className={\"card-detail-pokemon-nom\"}>{pokemon.name}</h2>\n            {verifFavoris()}\n            <p className={\"card-detail-pokemon-sous-titres\"}> Type(s) :</p>\n            <div className={\"card-detail-pokemon-div\"}>\n                {pokemon.length !== 0\n                    ?pokemon.types.map(type => (\n                        <img className={\"card-detail-pokemon-image-type\"} src={window.location.origin + '/types/' + type.type.name + '.png'}/>\n                    ))\n                    :''\n                }\n            </div>\n            <p className={\"card-detail-pokemon-sous-titres\"}> Statistiques :</p>\n            <div className={\"card-detail-pokemon-div\"}>\n                {pokemon.length !== 0\n                    ?pokemon.stats.map(stat => (\n                        <p className={\"card-detail-pokemon-texte\"}><strong>{ stat.stat.name }</strong> : { stat.base_stat }</p>\n                    ))\n                    :''\n                }\n            </div>\n            <p className={\"card-detail-pokemon-sous-titres\"}> Autres :</p>\n            <div className={\"card-detail-pokemon-div\"}>\n                <p className={\"card-detail-pokemon-texte\"}><strong>hauteur</strong> : {pokemon.height}</p>\n                <p className={\"card-detail-pokemon-texte\"}><strong>poids</strong> : {pokemon.weight}</p>\n            </div>\n        </div>\n    )\n\n    return(\n        <div>\n            {state !== 'rien'\n                ? affichageDetailPokemon\n                : <p>Aucun pokémon sélectionné</p>\n            }\n        </div>\n    );\n}\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ajoutPokemonMesFavoris, requeteDetailPokemon, selectPokemonsListe} from \"./pokemonsSlice\";\n\n\nexport const PokemonCard = () => {\n    // Récupération des pokémons\n    const pokemons = useSelector(selectPokemonsListe)\n\n    // dispatch\n    const dispatch = useDispatch()\n\n    // Permet d'aller chercher les données du pokémon qui viens d'être ciblé par l'utilisateur\n    const pokemonCible = (name) => {\n        dispatch(requeteDetailPokemon(name))\n    }\n\n    // Récupération de l'id du pokémon grâce à l'url du pokémon qui le contient\n    // cet id sera utilisé dans un autre url pour récupérer l'image\n    const image = (urlImage) => {\n        let image = urlImage.split('/')\n        let resultatImage = image[6]\n        return resultatImage\n    };\n\n    // Affichage des pokémons qui sont contenu dans la liste\n    const pokemonCard = pokemons.results.map(pokemon => (\n        <div className={\"card-pokemon-liste\"}>\n            <img onClick={() => pokemonCible(pokemon.name)} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + image(pokemon.url) + \".png\"}/>\n            <button key={pokemon.name} onClick={() => pokemonCible(pokemon.name)} className={\"bouton-pokemon-liste\"}>{pokemon.name}</button>\n        </div>\n    ))\n\n    return (\n        pokemonCard\n    )\n}\n","import {useDispatch, useSelector} from \"react-redux\";\nimport {useEffect} from \"react\";\nimport {DetailPokemon} from \"./DetailPokemon\";\nimport {PokemonCard} from \"./PokemonCard\";\nimport {Spinner} from \"./Spinner\";\nimport {\n    requeteIndex,\n    selectorStatus,\n    selectPokemonsListe,\n} from \"./pokemonsSlice\";\n\nexport const PokeListe = () => {\n    // Récupération des pokémons\n    const pokemons = useSelector(selectPokemonsListe)\n\n    // Numéro de la page, ne fonctionne pas vraiment\n    let numeroPage = 1\n\n    // dispatch\n    const dispatch = useDispatch()\n    // statut de la requête\n    const status = useSelector(selectorStatus)\n\n    // Permet de retourner une liste de pokémons si aucune liste n'a été retourné\n    useEffect( () => {\n        if (status === 'inactif'){\n            dispatch(requeteIndex('https://pokeapi.co/api/v2/pokemon?offset=0&limit=20'))\n        }\n    })\n\n    // Permet de passer à la liste de pokémon suivante à celle d'afficher actuellement\n    const pageSuivante = () => {\n        dispatch(requeteIndex(pokemons.next))\n\n    }\n\n    // Permet de passer à la liste de pokémon précédente à celle d'afficher actuellement\n    const pagePrecedente = () => {\n        dispatch(requeteIndex(pokemons.previous))\n    }\n\n    return(\n        <div className=\"App container-fluid\">\n            <h1>Poké liste</h1>\n            <h2>Liste des pokémons :</h2>\n            <div className={\"row\"}>\n                <div className={\"col-sm-8\"}>\n                    <div className={\"bouton-nav-liste-pokemon\"}>\n                        <button onClick={pagePrecedente} className={\"bouton-changer-page\"}>Précédent</button>\n                        <p className={\"numero-page\"}>{numeroPage}</p>\n                        <button onClick={pageSuivante} className={\"bouton-changer-page\"}>Suivant</button>\n                    </div>\n                    {pokemons.length !== 0\n                        ?\n                        <div className={\"liste-pokemon\"}>\n                            {status === 'succès' ?<PokemonCard/> :<Spinner/>}\n                        </div>\n                        :<div></div>\n                    }\n                </div>\n                <div className={\"col-sm-4\"}>\n                    <DetailPokemon />\n                </div>\n            </div>\n        </div>\n    );\n}\n\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {requeteDetailPokemon, selectPokemonListeType} from \"./pokemonsSlice\";\n\n\nexport const PokemonCardType = () => {\n    // Récupération des pokémons\n    const pokemons = useSelector(selectPokemonListeType)\n\n    // dispatch\n    const dispatch = useDispatch()\n\n    // Permet d'aller chercher les données du pokémon qui viens d'être ciblé par l'utilisateur\n    const pokemonCible = (name) => {\n        dispatch(requeteDetailPokemon(name))\n    }\n\n    // Récupération de l'id du pokémon grâce à l'url du pokémon qui le contient\n    // Cet id sera utilisé dans un autre url pour récupérer l'image\n    const image = (urlImage) => {\n        let image = urlImage.split('/')\n        let resultatImage = image[6]\n        return resultatImage\n    };\n\n    // Affichage des pokémons qui sont contenu dans la liste\n    const pokemonCard = pokemons.pokemon.map(pokemon => (\n        <div className={\"card-pokemon-liste\"}>\n            <img onClick={() => pokemonCible(pokemon.pokemon.name)} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + image(pokemon.pokemon.url) + \".png\"}/>\n            <button key={pokemon.pokemon.name} onClick={() => pokemonCible(pokemon.pokemon.name)} className={\"bouton-pokemon-liste\"}>{pokemon.pokemon.name}</button>\n        </div>\n    ))\n\n    return (\n        pokemonCard\n    )\n}\n","import React, {useEffect} from \"react\";\nimport {DetailPokemon} from \"./DetailPokemon\";\nimport types from \"../../types.json\";\nimport {Spinner} from \"./Spinner\";\nimport {PokemonCardType} from \"./PokemonCardType\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    requetePokemonType,\n    selectorStatusListeType,\n    selectPokemonListeType,\n} from \"./pokemonsSlice\";\n\nexport const PokemonType = () => {\n    // Récupération de la liste des pokémons\n    const pokemons = useSelector(selectPokemonListeType)\n\n    // dispatch\n    const dispatch = useDispatch()\n    // statut de la requête\n    const status = useSelector(selectorStatusListeType)\n\n    // Permet de retourner une liste de pokémons si aucune liste n'a été retourné\n    useEffect( () => {\n        if (status === 'rien'){\n            dispatch(requetePokemonType(1))\n        }\n    })\n\n    // Permet de changer le type des pokémons que l'on souhaite voir\n    const changertype = (id) => {\n        dispatch(requetePokemonType(id))\n    }\n\n    // Permet de retourne l'images des types des pokémons\n    // Si c'est le type sélectionné par l'utilsiateur alors il prendra une classe avec de l'opacity\n    const imageDesTypes = (type) => {\n        if(pokemons.name === type.name){\n            return(<img onClick={() => changertype(type.id)} className={\"liste-type-pokemon-image opacity\"} src={window.location.origin + '/types/' + type.name + '.png'}/>)\n        } else {\n            return(<img onClick={() => changertype(type.id)} className={\"liste-type-pokemon-image\"} src={window.location.origin + '/types/' + type.name + '.png'}/>)\n        }\n    }\n\n    return(\n        <div className=\"App container-fluid\">\n            <h1>Pokémon par type</h1>\n            <h2>Les différents types :</h2>\n            <div className={\"liste-type-pokemon\"}>\n                {types.map(type => (\n                    imageDesTypes(type)\n                ))\n                }\n            </div>\n\n            <div className={\"row\"}>\n                <div className={\"col-sm-8\"}>\n                    <h2>Liste selon le type sélectionné :</h2>\n                    {pokemons.length !== 0\n                        ?\n                        <div className={\"liste-pokemon\"}>\n                            {status === 'succès' ?<PokemonCardType/> :<Spinner/>}\n                        </div>\n                        :<div></div>\n                    }\n                </div>\n\n                <div className={\"col-sm-4\"}>\n                    <DetailPokemon />\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {requeteDetailPokemon, selectListeMesFavoris} from \"./pokemonsSlice\";\n\n\nexport const PokemonCardFavoris = () => {\n    // Récupération des pokémons\n    const pokemons = useSelector(selectListeMesFavoris)\n\n    // dispatch\n    const dispatch = useDispatch()\n\n    // Permet d'aller chercher les données du pokémon qui viens d'être ciblé par l'utilisateur\n    const pokemonCible = (name) => {\n        dispatch(requeteDetailPokemon(name))\n    }\n\n    // Affichage des pokémons qui sont contenu dans la liste\n    const pokemonCard = pokemons.map(pokemon => (\n        <div className={\"card-pokemon-liste\"}>\n            <img onClick={() => pokemonCible(pokemon.name)} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + pokemon.id + \".png\"}/>\n            <button key={pokemon.name} onClick={() => pokemonCible(pokemon.name)} className={\"bouton-pokemon-liste\"}>{pokemon.name}</button>\n        </div>\n    ))\n\n    return (\n        pokemonCard\n    )\n}\n","import React from \"react\";\nimport {PokemonCardFavoris} from \"./PokemonCardFavoris\";\nimport {DetailPokemon} from \"./DetailPokemon\";\n\nexport const Favoris = () => {\n    return(\n        <div className=\"App container-fluid\">\n            <h1>Favoris</h1>\n            <h2>Liste de mes favoris</h2>\n            <div className={\"row\"}>\n                <div className={\"col-sm-8\"}>\n                    <div className={\"liste-pokemon\"}>\n                        <PokemonCardFavoris/>\n                    </div>\n                </div>\n                <div className={\"col-sm-4\"}>\n                    <DetailPokemon/>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\r\nimport './App.scss';\r\nimport {Accueil} from \"./features/documents/Accueil\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport {PokeListe} from \"./features/documents/PokeListe\";\r\nimport {PokemonType} from \"./features/documents/PokemonType\";\r\nimport {Favoris} from \"./features/documents/Favoris\";\r\n\r\nfunction App() {\r\n  return (\r\n  <Router>\r\n    <div>\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item active\">\r\n            <Link class=\"nav-link\" to=\"/\">Accueil</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link class=\"nav-link\" to=\"/poke-liste\">Poké liste</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link class=\"nav-link\" to=\"/pokemon-type\">Pokémon par type</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link class=\"nav-link\" to=\"/mes-favoris\">Mes favoris</Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n\r\n\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Accueil />\r\n        </Route>\r\n        <Route path=\"/poke-liste\">\r\n          <PokeListe />\r\n        </Route>\r\n        <Route path=\"/pokemon-type\">\r\n          <PokemonType/>\r\n        </Route>\r\n        <Route path=\"/mes-favoris\">\r\n          <Favoris/>\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport pokemonsReducer from '../features/documents/pokemonsSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    pokemons: pokemonsReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}